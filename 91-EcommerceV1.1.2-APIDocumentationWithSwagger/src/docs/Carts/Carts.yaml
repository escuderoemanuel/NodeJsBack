paths:

  #? Endpoint (all carts)
  /api/carts/:
    # Get Method
    get:
      summary: Get all existing carts, whether or not they have added products.
      security:
        - bearerAuth: []
      tags:
        - [Carts]
      responses:
        "200":
          description: All carts were correctly obtained from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        "500":
          description: Internal server error

    # Post Method
    post:
      summary: Create a empty cart manually, but when a user registers, a empty cart is automatically created and assigned to that user.
      security:
        - bearerAuth: []
      tags:
        - [Carts]
      responses:
        '200':
          description: Cart was created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request, cart was not created
        '500':
          description: Internal server error

  #? Endpoint (cart by id)
  /api/carts/{cid}:
    # Get Method
    get:
      summary: Get a cart by id
      security:
        - bearerAuth: []
      tags:
        - [Carts]
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
            example: "66291acaff0b5f0c7a285dc6"
      responses:
        '200':
          description: Cart was correctly obtained from the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Cart was not found in the database
        '500':
          description: Internal server error

    delete:
      summary: Empty cart by id
      security:
        - bearerAuth: []
      tags:
        - [Carts]
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
            example: "664e8d1e4e828721745e8243"
      responses:
        '200':
          description: Cart was correctly deleted from the database
        '404':
          description: Cart was not found in the database
        '500':
          description: Internal server error
  
  #? Endpoint (cart by id)
  /api/carts/{cid}/purchase:
    get:
      summary: Search the cart by id, generate a purchase ticket with the products in the cart and finally empty the cart
      security:
        - bearerAuth: []
      tags:
        - [Carts]
      parameters:
        - name: cid
          in: path
          required: true
          description: The id of the cart to purchase
          schema:
            type: string
            example: 664e8d1e4e828721745e8243
      responses:
        '200':
          description: Cart was correctly purchased
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '404':
          description: Cart was not found in the database
        '500':
          description: Internal server error
  
  #? Endpoint (cart by id + product by id)
  /api/carts/{cid}/product/{pid}:
    # Post method
    post:
      summary: Add an existing product to an existing cart
      secutity:
        - bearerAuth: []
      tags:
        - [Carts]
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
            example: "66291acaff0b5f0c7a285dc6"
        - name: pid
          in: path
          required: true
          schema:
            type: string
            example: "65ffd0289713b7d3858134f4"
      responses:
        '200':
          description: Product was correctly added to the cart
        '404':
          description: Cart or product was not found in the database
        '500':
          description: Internal server error

    # Put method
    put:
      summary: Update the 'quantity' of an existing product within an existing cart
      security:
        - bearerAuth: []
      tags:
        - [Carts]
      parameters:
        - name: cid
          in: path
          required: true
          description: Cart Id
          schema:
            type: string
            example: "66291acaff0b5f0c7a285dc6"
        - name: pid
          in: path
          required: true
          description: Product Id
          schema:
            type: string
            example: "65ffd0289713b7d3858134fa"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  example: 3
              required:
                - quantity
      responses:
        '200':
          description: The product quantity was correctly updated
        '404':
          description: Cart or product was not found in the database
        '500':
          description: Internal server error

    # Delete method
    delete:
      summary: Delete an existing product within an existing cart
      secutity:
        - bearerAuth: []
      tags:
        - [Carts]
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
            example: "66291acaff0b5f0c7a285dc6"
        - name: pid
          in: path
          required: true
          schema:
            type: string
            example: "65ffd0289713b7d3858134f4"
      responses:
        '200':
          description: Product was correctly removed to the cart
        '404':
          description: Cart or product was not found in the database
        '500':
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Cart:
      type: object
      properties:
        _id:
          type: string
          description: The auto-generated id of the cart
        products:
          type: array
          description: The products in the cart
      example:
        products:
          - product: "65ffd0289713b7d3858134f4"
            quantity: 1
          - product: "65ffd0289713b7d3858134f7"
            quantity: 2
    
    Purchase:
      type: object
      properties:
        code:
          type: string
          description: The code of the purchase
        purchase_datetime:
          type: string
          description: The datetime of the purchase
        amount:
          type: number
          description: The amount of the purchase
        purchaser:
          type: string
          description: The purchaser of the purchase
      example:
        code: "7ca0c948-79de-433d-82ef-a6e66f1385c6"
        purchase_datetime: "22/5/2024, 17:52:07"
        amount: 1000
        purchaser: "purchaser@gmail.com"